generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  phonenumber       String              @unique
  name              String
  age               Int
  userClass         String
  characterGender   String
  characterName     String
  characterStyle    String
  characterTraits   String[]            // Array of traits
  createdAt         DateTime            @default(now())

   // Reverse relations
  financeChallenges         FinanceChallenge[]
  dmChallenges              DMChallenge[]
  communicationChallenges   CommunicationChallenge[]
  computersChallenges       ComputersChallenge[]
  entrepreneurshipChallenges EntrepreneurshipChallenge[]
  environmentChallenges     EnvironmentChallenge[]
  lawChallenges             LawChallenge[]
  leadershipChallenges      LeadershipChallenge[]
  selChallenges             SELChallenge[]       
}

model OtpVerification {
  phonenumber   String   @id
  otp           String
  otpExpiration DateTime
  createdAt     DateTime @default(now())
}

model FinanceChallenge {
  id             String   @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean  @default(false)
  completedAt    DateTime?

  user           User     @relation(fields: [userId], references: [id])  // Forward relation

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model DMChallenge {
  id             String   @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean  @default(false)
  completedAt    DateTime?

  user           User     @relation(fields: [userId], references: [id])  // Forward relation

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

 model CommunicationChallenge {
  id             String   @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean  @default(false)
  completedAt    DateTime?

  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model ComputersChallenge {
  id             String   @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean  @default(false)
  completedAt    DateTime?

  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model EntrepreneurshipChallenge {
  id             String   @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean  @default(false)
  completedAt    DateTime?

  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model EnvironmentChallenge {
  id             String   @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean  @default(false)
  completedAt    DateTime?

  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model LawChallenge {
  id             String   @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean  @default(false)
  completedAt    DateTime?

  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model LeadershipChallenge {
  id             String   @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean  @default(false)
  completedAt    DateTime?

  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model SELChallenge {
  id             String   @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean  @default(false)
  completedAt    DateTime?

  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}
